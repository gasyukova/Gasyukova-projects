{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Анализ интернет-магазина, запуск A/B-теста"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проект посвящен анализу текущих заказов и выбору путей увеличения прибыли крупного интернет-магазина.\n",
    "Для этого имеющиеся гипотезы будут приоритизированы, осуществлен A/B-тест и проанализированы результаты, на основе чего предложены потенциальные рекомендации для дальнейших действий со стороны магазина. \n",
    "\n",
    "Данные:\n",
    "\n",
    "\n",
    "в распоряжении аналитика три датасета: параметры приоритизации гипотез; характеристики заказов (1197 кейсов) и визитов (62 кейса). Данные - за август 2019 г.\n",
    "\n",
    "Анализ будет строиться на расчетах показателей выручки, конверсии, количества заказов, стоимостей заказов, выявлении статистической значимости различий выручки и конверсии между двумя группами. Данные расчеты осуществляются на сырых и очищенных от выбросов данных.\n",
    "\n",
    "Рзультаты данных расчетов позволят принять решение о необходимости продолжения A/B-теста."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Загрузка данных и подготовка их к анализу"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Импортируем нужные библиотеки\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime, timedelta\n",
    "from matplotlib import pyplot as plt\n",
    "import datetime as dt\n",
    "from scipy import stats as st\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# загрузим данные \n",
    "hypothesis, orders, visitors = (\n",
    "    pd.read_csv('/datasets/hypothesis.csv'),  # hypothesis\n",
    "    pd.read_csv('/datasets/orders.csv'),  # orders\n",
    "    pd.read_csv('/datasets/visitors.csv') #visitors\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hypothesis</th>\n",
       "      <th>Reach</th>\n",
       "      <th>Impact</th>\n",
       "      <th>Confidence</th>\n",
       "      <th>Efforts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Добавить два новых канала привлечения трафика,...</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Запустить собственную службу доставки, что сок...</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Добавить блоки рекомендаций товаров на сайт ин...</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Изменить структура категорий, что увеличит кон...</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Изменить цвет фона главной страницы, чтобы уве...</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Hypothesis  Reach  Impact  \\\n",
       "0  Добавить два новых канала привлечения трафика,...      3      10   \n",
       "1  Запустить собственную службу доставки, что сок...      2       5   \n",
       "2  Добавить блоки рекомендаций товаров на сайт ин...      8       3   \n",
       "3  Изменить структура категорий, что увеличит кон...      8       3   \n",
       "4  Изменить цвет фона главной страницы, чтобы уве...      3       1   \n",
       "\n",
       "   Confidence  Efforts  \n",
       "0           8        6  \n",
       "1           4       10  \n",
       "2           7        3  \n",
       "3           3        8  \n",
       "4           1        1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypothesis.head(5)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "hypothesis.columns = hypothesis.columns.str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9 entries, 0 to 8\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   hypothesis  9 non-null      object\n",
      " 1   reach       9 non-null      int64 \n",
      " 2   impact      9 non-null      int64 \n",
      " 3   confidence  9 non-null      int64 \n",
      " 4   efforts     9 non-null      int64 \n",
      "dtypes: int64(4), object(1)\n",
      "memory usage: 488.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "hypothesis.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар             1\n",
       "Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа    1\n",
       "Запустить акцию, дающую скидку на товар в день рождения                                                         1\n",
       "Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов                        1\n",
       "Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей              1\n",
       "Запустить собственную службу доставки, что сократит срок доставки заказов                                       1\n",
       "Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию            1\n",
       "Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок                1\n",
       "Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей                                1\n",
       "Name: hypothesis, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show the full hypothesis\n",
    "hypothesis['hypothesis'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей\n",
       "1                                       Запустить собственную службу доставки, что сократит срок доставки заказов\n",
       "2    Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа\n",
       "3             Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар\n",
       "4                                Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей\n",
       "5                        Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов\n",
       "6            Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию\n",
       "7                Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок\n",
       "8                                                         Запустить акцию, дающую скидку на товар в день рождения\n",
       "Name: hypothesis, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.options.display.max_colwidth = 150\n",
    "hypothesis['hypothesis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hypothesis    Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа\n",
       "reach                                                                                                                    1\n",
       "impact                                                                                                                   1\n",
       "confidence                                                                                                               1\n",
       "efforts                                                                                                                  1\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypothesis.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hypothesis    Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию\n",
       "reach                                                                                                           10\n",
       "impact                                                                                                          10\n",
       "confidence                                                                                                       9\n",
       "efforts                                                                                                         10\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypothesis.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transactionId</th>\n",
       "      <th>visitorId</th>\n",
       "      <th>date</th>\n",
       "      <th>revenue</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3667963787</td>\n",
       "      <td>3312258926</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>1650</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2804400009</td>\n",
       "      <td>3642806036</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>730</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2961555356</td>\n",
       "      <td>4069496402</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>400</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3797467345</td>\n",
       "      <td>1196621759</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>9759</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2282983706</td>\n",
       "      <td>2322279887</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>2308</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   transactionId   visitorId        date  revenue group\n",
       "0     3667963787  3312258926  2019-08-15     1650     B\n",
       "1     2804400009  3642806036  2019-08-15      730     B\n",
       "2     2961555356  4069496402  2019-08-15      400     A\n",
       "3     3797467345  1196621759  2019-08-15     9759     B\n",
       "4     2282983706  2322279887  2019-08-15     2308     B"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.head(5)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   transactionId  1197 non-null   int64 \n",
      " 1   visitorId      1197 non-null   int64 \n",
      " 2   date           1197 non-null   object\n",
      " 3   revenue        1197 non-null   int64 \n",
      " 4   group          1197 non-null   object\n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 46.9+ KB\n"
     ]
    }
   ],
   "source": [
    "orders.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "orders.columns = orders.columns.str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "orders['date'] = orders['date'].map(\n",
    "    lambda x: dt.datetime.strptime(x, '%Y-%m-%d')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   transactionid  1197 non-null   int64         \n",
      " 1   visitorid      1197 non-null   int64         \n",
      " 2   date           1197 non-null   datetime64[ns]\n",
      " 3   revenue        1197 non-null   int64         \n",
      " 4   group          1197 non-null   object        \n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 46.9+ KB\n"
     ]
    }
   ],
   "source": [
    "orders.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.duplicated().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2019-08-01 00:00:00')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['date'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2019-08-31 00:00:00')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>A</td>\n",
       "      <td>619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>A</td>\n",
       "      <td>507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>A</td>\n",
       "      <td>717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>A</td>\n",
       "      <td>756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2019-08-06</td>\n",
       "      <td>A</td>\n",
       "      <td>667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2019-08-07</td>\n",
       "      <td>A</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2019-08-08</td>\n",
       "      <td>A</td>\n",
       "      <td>610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2019-08-09</td>\n",
       "      <td>A</td>\n",
       "      <td>617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2019-08-10</td>\n",
       "      <td>A</td>\n",
       "      <td>406</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date group  visitors\n",
       "0  2019-08-01     A       719\n",
       "1  2019-08-02     A       619\n",
       "2  2019-08-03     A       507\n",
       "3  2019-08-04     A       717\n",
       "4  2019-08-05     A       756\n",
       "5  2019-08-06     A       667\n",
       "6  2019-08-07     A       644\n",
       "7  2019-08-08     A       610\n",
       "8  2019-08-09     A       617\n",
       "9  2019-08-10     A       406"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitors.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitors.duplicated().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "visitors['date'] = visitors['date'].map(\n",
    "    lambda x: dt.datetime.strptime(x, '%Y-%m-%d')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 62 entries, 0 to 61\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype         \n",
      "---  ------    --------------  -----         \n",
      " 0   date      62 non-null     datetime64[ns]\n",
      " 1   group     62 non-null     object        \n",
      " 2   visitors  62 non-null     int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "visitors.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2019-08-01 00:00:00')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['date'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2019-08-31 00:00:00')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['date'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    В предварительной работе с данными нами был приведен формат переменных к единому регистру, временные переменные приведены к нужному формату, осуществлена проверка на дубликаты, рассмотрены полные формулировки гипотез."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Приоритизация гипотез"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ICE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                     hypothesis  \\\n",
      "8                                                       Запустить акцию, дающую скидку на товар в день рождения   \n",
      "0            Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей   \n",
      "7              Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок   \n",
      "6          Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию   \n",
      "2  Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа   \n",
      "1                                     Запустить собственную службу доставки, что сократит срок доставки заказов   \n",
      "5                      Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов   \n",
      "3           Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар   \n",
      "4                              Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей   \n",
      "\n",
      "         ICE  \n",
      "8  16.200000  \n",
      "0  13.333333  \n",
      "7  11.200000  \n",
      "6   8.000000  \n",
      "2   7.000000  \n",
      "1   2.000000  \n",
      "5   1.333333  \n",
      "3   1.125000  \n",
      "4   1.000000  \n"
     ]
    }
   ],
   "source": [
    "# ICE score = (Impact x Confidence) / Efforts\n",
    "hypothesis['ICE'] =  hypothesis['impact']*hypothesis['confidence']/hypothesis['efforts']\n",
    "print(hypothesis[['hypothesis', 'ICE']].sort_values('ICE', ascending = False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### RICE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                     hypothesis  \\\n",
      "7              Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок   \n",
      "2  Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа   \n",
      "0            Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей   \n",
      "6          Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию   \n",
      "8                                                       Запустить акцию, дающую скидку на товар в день рождения   \n",
      "3           Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар   \n",
      "1                                     Запустить собственную службу доставки, что сократит срок доставки заказов   \n",
      "5                      Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов   \n",
      "4                              Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей   \n",
      "\n",
      "    RICE  \n",
      "7  112.0  \n",
      "2   56.0  \n",
      "0   40.0  \n",
      "6   40.0  \n",
      "8   16.2  \n",
      "3    9.0  \n",
      "1    4.0  \n",
      "5    4.0  \n",
      "4    3.0  \n"
     ]
    }
   ],
   "source": [
    "# RICE = (Reach x Impact x Confidence)/Efforts\n",
    "hypothesis['RICE'] = hypothesis['reach']*hypothesis['impact']*hypothesis['confidence']/hypothesis['efforts']\n",
    "print(hypothesis[['hypothesis', 'RICE']].sort_values('RICE', ascending = False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Выводы по приоритизации"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                     hypothesis  \\\n",
      "8                                                       Запустить акцию, дающую скидку на товар в день рождения   \n",
      "0            Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей   \n",
      "7              Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок   \n",
      "6          Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию   \n",
      "2  Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа   \n",
      "1                                     Запустить собственную службу доставки, что сократит срок доставки заказов   \n",
      "5                      Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов   \n",
      "3           Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар   \n",
      "4                              Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей   \n",
      "\n",
      "         ICE   RICE  \n",
      "8  16.200000   16.2  \n",
      "0  13.333333   40.0  \n",
      "7  11.200000  112.0  \n",
      "6   8.000000   40.0  \n",
      "2   7.000000   56.0  \n",
      "1   2.000000    4.0  \n",
      "5   1.333333    4.0  \n",
      "3   1.125000    9.0  \n",
      "4   1.000000    3.0  \n"
     ]
    }
   ],
   "source": [
    "print(hypothesis[['hypothesis', 'ICE', 'RICE']].sort_values('ICE', ascending = False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    По параметру  ICE наиболее приоритетна гипотеза \"Запустить акцию, дающую скидку на товар в день рождения\", по параметру RICE - \"Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок\". Если первый параметр позволяет выявить гипотезу с потенциалом наибольшего влияния на покупателей и уверенности в ее эффективности, то RICE учитывает характеристику охвата аудитории, при этом лидер гипотезы по ICE сильно отстает по показаелю охвата от других пипотез. Лидер RICE в тоже время может состоит в тройке лидеров по ICE. Поэтому наиболее приоритетной можно считать гипотезу \"Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Анализ A/B-теста"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### График кумулятивной выручки по группам"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Найдем заказчиков, фигурирующих в двух группах одновременно, и удалим эти кейсы из базы заказчиков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "B    640\n",
       "A    557\n",
       "Name: group, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['group'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.query('group==\"B\"')['visitorid'].isin(orders.query('group==\"A\"')['visitorid']).sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "double = orders.groupby('visitorid')['group'].nunique().reset_index().query('group>1')['visitorid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1016 entries, 0 to 1196\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   transactionid  1016 non-null   int64         \n",
      " 1   visitorid      1016 non-null   int64         \n",
      " 2   date           1016 non-null   datetime64[ns]\n",
      " 3   revenue        1016 non-null   int64         \n",
      " 4   group          1016 non-null   object        \n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 47.6+ KB\n"
     ]
    }
   ],
   "source": [
    "orders = orders[~orders['visitorid'].isin(double)]\n",
    "orders.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Создадим отдельную базу данных, в которой для каждого заказа определенной даты и группы теста рассчитана общая выручка"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>142779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>142779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>142779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>142779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>142779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>958</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>A</td>\n",
       "      <td>3364656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>A</td>\n",
       "      <td>3364656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>A</td>\n",
       "      <td>3364656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1011</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>A</td>\n",
       "      <td>3364656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>A</td>\n",
       "      <td>3364656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>155 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           date group  revenue\n",
       "55   2019-08-01     A   142779\n",
       "72   2019-08-01     A   142779\n",
       "73   2019-08-01     A   142779\n",
       "96   2019-08-01     A   142779\n",
       "98   2019-08-01     A   142779\n",
       "...         ...   ...      ...\n",
       "958  2019-08-31     A  3364656\n",
       "996  2019-08-31     A  3364656\n",
       "1010 2019-08-31     A  3364656\n",
       "1011 2019-08-31     A  3364656\n",
       "1014 2019-08-31     A  3364656\n",
       "\n",
       "[155 rows x 3 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datesGroups = orders[['date', 'group']]\n",
    "ordersAggregated = datesGroups.apply(\n",
    "    lambda x: orders[np.logical_and(orders['date'] <= x['date'], orders['group'] == x['group'])].agg({\n",
    "'date' : 'max',\n",
    "'group' : 'max',\n",
    "'revenue' : 'sum'}), axis=1).sort_values(by=['date','group'])\n",
    "\n",
    "ordersAggregated.groupby('date').head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# датафрейм с кумулятивной выручкой по дням в группе А\n",
    "cumulativeRevenueA = ordersAggregated[ordersAggregated['group']=='A'][['date','revenue']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# датафрейм с кумулятивной выручкой по дням в группе В\n",
    "cumulativeRevenueB = ordersAggregated[ordersAggregated['group']=='B'][['date','revenue']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cumulativeRevenueA['date'], cumulativeRevenueA['revenue'], label='A')\n",
    "plt.plot(cumulativeRevenueB['date'], cumulativeRevenueB['revenue'], label='B')\n",
    "plt.title('Динамика выручки двух групп')  # название графика\n",
    "plt.xlabel('Дата заказа')  # название оси X\n",
    "plt.xticks(rotation=45)  # угол наклона подписей на оси X\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    График кумулятивной выручки по группам демонстрирует, что примерно до 12 августа общая выручка позаказам двух групп - была примерно идентичной, но во второй половине месяца заказы группы В вырываются вперед и показываются гораздо большую прибыль, чем А."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### График кумулятивного среднего чека по группам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1016 entries, 0 to 1196\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   transactionid  1016 non-null   int64         \n",
      " 1   visitorid      1016 non-null   int64         \n",
      " 2   date           1016 non-null   datetime64[ns]\n",
      " 3   revenue        1016 non-null   int64         \n",
      " 4   group          1016 non-null   object        \n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 47.6+ KB\n"
     ]
    }
   ],
   "source": [
    "orders.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Поскольку для расчетов среднего чека нам необходимо знать число заказов (и в будущем- покупателей), сформируем расширенную аналогичную базу с добавлением переменных заказов и покупателей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "ordersAggregated = datesGroups.apply(\n",
    "\tlambda x: orders[np.logical_and(orders['date'] <= x['date'], orders['group'] == x['group'])].agg({\n",
    "'date' : 'max',\n",
    "'group' : 'max',\n",
    "'transactionid' : pd.Series.nunique,\n",
    "'visitorid' : pd.Series.nunique,\n",
    "'revenue' : 'sum'}), axis=1).sort_values(by=['date','group'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1016 entries, 55 to 1038\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   date           1016 non-null   datetime64[ns]\n",
      " 1   group          1016 non-null   object        \n",
      " 2   transactionid  1016 non-null   int64         \n",
      " 3   visitorid      1016 non-null   int64         \n",
      " 4   revenue        1016 non-null   int64         \n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 47.6+ KB\n"
     ]
    }
   ],
   "source": [
    "ordersAggregated.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 62 entries, 0 to 61\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype         \n",
      "---  ------    --------------  -----         \n",
      " 0   date      62 non-null     datetime64[ns]\n",
      " 1   group     62 non-null     object        \n",
      " 2   visitors  62 non-null     int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "visitors.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>B</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>A</td>\n",
       "      <td>619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>B</td>\n",
       "      <td>581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>A</td>\n",
       "      <td>507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2019-08-29</td>\n",
       "      <td>A</td>\n",
       "      <td>577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2019-08-30</td>\n",
       "      <td>B</td>\n",
       "      <td>490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2019-08-30</td>\n",
       "      <td>A</td>\n",
       "      <td>490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>A</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>B</td>\n",
       "      <td>718</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>62 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         date group  visitors\n",
       "0  2019-08-01     A       719\n",
       "31 2019-08-01     B       713\n",
       "1  2019-08-02     A       619\n",
       "32 2019-08-02     B       581\n",
       "2  2019-08-03     A       507\n",
       "..        ...   ...       ...\n",
       "28 2019-08-29     A       577\n",
       "60 2019-08-30     B       490\n",
       "29 2019-08-30     A       490\n",
       "30 2019-08-31     A       699\n",
       "61 2019-08-31     B       718\n",
       "\n",
       "[62 rows x 3 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitors.sort_values('date')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Также создаем базу для посетителей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "visitorsAggregated = datesGroups.apply(\n",
    "\tlambda x: visitors[np.logical_and(visitors['date'] <= x['date'], visitors['group'] == x['group'])].agg({\n",
    "'date' : 'max',\n",
    "'group' : 'max',\n",
    "'visitors' : 'sum'}), axis=1).sort_values(by=['date','group'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1016 entries, 0 to 1196\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   date    1016 non-null   datetime64[ns]\n",
      " 1   group   1016 non-null   object        \n",
      "dtypes: datetime64[ns](1), object(1)\n",
      "memory usage: 23.8+ KB\n"
     ]
    }
   ],
   "source": [
    "datesGroups.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1016 entries, 55 to 1038\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype         \n",
      "---  ------    --------------  -----         \n",
      " 0   date      1016 non-null   datetime64[ns]\n",
      " 1   group     1016 non-null   object        \n",
      " 2   visitors  1016 non-null   int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 31.8+ KB\n"
     ]
    }
   ],
   "source": [
    "visitorsAggregated.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Объединим две базы заказов и посетителей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>revenue</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>142779</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>142779</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>142779</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>142779</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>142779</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date group  transactionid  visitorid  revenue  visitors\n",
       "0 2019-08-01     A             23         19   142779       719\n",
       "1 2019-08-01     A             23         19   142779       719\n",
       "2 2019-08-01     A             23         19   142779       719\n",
       "3 2019-08-01     A             23         19   142779       719\n",
       "4 2019-08-01     A             23         19   142779       719"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cumulativeData = ordersAggregated.merge(visitorsAggregated, left_on=['date', 'group'], right_on=['date', 'group'])\n",
    "\n",
    "cumulativeData.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "cumulativeData.columns = ['date', 'group', 'orders', 'buyers', 'revenue', 'visitors']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 18144 entries, 0 to 18143\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count  Dtype         \n",
      "---  ------    --------------  -----         \n",
      " 0   date      18144 non-null  datetime64[ns]\n",
      " 1   group     18144 non-null  object        \n",
      " 2   orders    18144 non-null  int64         \n",
      " 3   buyers    18144 non-null  int64         \n",
      " 4   revenue   18144 non-null  int64         \n",
      " 5   visitors  18144 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(4), object(1)\n",
      "memory usage: 992.2+ KB\n"
     ]
    }
   ],
   "source": [
    "cumulativeData.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>orders</th>\n",
       "      <th>buyers</th>\n",
       "      <th>revenue</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6955</th>\n",
       "      <td>2019-08-10</td>\n",
       "      <td>B</td>\n",
       "      <td>198</td>\n",
       "      <td>195</td>\n",
       "      <td>1268123</td>\n",
       "      <td>6277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13291</th>\n",
       "      <td>2019-08-22</td>\n",
       "      <td>B</td>\n",
       "      <td>401</td>\n",
       "      <td>388</td>\n",
       "      <td>4050134</td>\n",
       "      <td>13524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15501</th>\n",
       "      <td>2019-08-27</td>\n",
       "      <td>A</td>\n",
       "      <td>419</td>\n",
       "      <td>400</td>\n",
       "      <td>2940471</td>\n",
       "      <td>16376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8856</th>\n",
       "      <td>2019-08-14</td>\n",
       "      <td>A</td>\n",
       "      <td>231</td>\n",
       "      <td>218</td>\n",
       "      <td>1601692</td>\n",
       "      <td>9058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7132</th>\n",
       "      <td>2019-08-11</td>\n",
       "      <td>A</td>\n",
       "      <td>181</td>\n",
       "      <td>169</td>\n",
       "      <td>1074396</td>\n",
       "      <td>6980</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            date group  orders  buyers  revenue  visitors\n",
       "6955  2019-08-10     B     198     195  1268123      6277\n",
       "13291 2019-08-22     B     401     388  4050134     13524\n",
       "15501 2019-08-27     A     419     400  2940471     16376\n",
       "8856  2019-08-14     A     231     218  1601692      9058\n",
       "7132  2019-08-11     A     181     169  1074396      6980"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cumulativeData.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Разделим базу по группам и выберем нужные для графика переменные. Чтобы получить средний чек - разделим выручку на число заказов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "cumulativeRevenueA = cumulativeData[cumulativeData['group'] == 'A'][['date', 'revenue', 'orders']]\n",
    "cumulativeRevenueB = cumulativeData[cumulativeData['group'] == 'B'][['date', 'revenue', 'orders']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe2781357f0>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cumulativeRevenueA['date'], cumulativeRevenueA['revenue']/cumulativeRevenueA['orders'], label='A')\n",
    "plt.plot(cumulativeRevenueB['date'], cumulativeRevenueB['revenue']/cumulativeRevenueB['orders'], label='B')\n",
    "plt.xlabel('Дата заказа')  # название оси X\n",
    "plt.title('Динамика кумулятивного среднего чека по группам')  # название графика\n",
    "plt.xticks(rotation=45)  # угол наклона подписей на оси X\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "График динамики кумулятивного среднего чека по группам показывает, что во второй половине августа группа В также начинает лидировать, хотя и в первых числах августа видно доминирование В, но затем следует скачок А, который постепенно снижается."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### График относительного изменения кумулятивного среднего чека группы B к группе A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "mergedCumulativeRevenue = cumulativeRevenueA.merge(cumulativeRevenueB, left_on='date', right_on='date', how='left', suffixes=['A', 'B'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x7fe277eb2130>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(\n",
    "\tmergedCumulativeRevenue['date'], (mergedCumulativeRevenue['revenueB']/mergedCumulativeRevenue['ordersB'])/(mergedCumulativeRevenue['revenueA']/mergedCumulativeRevenue['ordersA'])-1\n",
    ")\n",
    "plt.legend()\n",
    "plt.xlabel('Дата заказа')  # название оси X\n",
    "plt.title('Динамика относительного изменения кумулятивного среднего чека группы B к группе A')  # название графика\n",
    "plt.xticks(rotation=45)\n",
    "plt.axhline(y=0, color='black', linestyle='--')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "     График относительного изменения кумулятивного среднего чека группы B к группе A показывает, что практически на всем исследуемом периоде, за исключением первых числе и промежутка 10-17 августа, выручка группы В в относительном выражении превышала выручку группы А."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### График кумулятивной конверсии по группам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# воспользуемся нашей подной объединенной базой для расчета конверсии\n",
    "cumulativeData['conversion'] = cumulativeData['orders']/cumulativeData['visitors']\n",
    "# отделяем данные по группе A\n",
    "cumulativeDataA = cumulativeData[cumulativeData['group']=='A']\n",
    "# отделяем данные по группе B\n",
    "cumulativeDataB = cumulativeData[cumulativeData['group']=='B']\n",
    "# отделяем данные по группе Bta[cumulativeData['group']=='B']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe277c97250>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# строим графики\n",
    "plt.plot(cumulativeDataA['date'], cumulativeDataA['conversion'], label='A')\n",
    "plt.plot(cumulativeDataB['date'], cumulativeDataB['conversion'], label='B')\n",
    "plt.xlabel('Дата заказа')  # название оси X\n",
    "plt.title('Динамика кумулятивной конверсии по группам')  # название графика\n",
    "plt.xticks(rotation=45)\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    График кумулятивной конверсии по группам показывает, что посетители из группы В чаще конвертировались, этот тренд после некоторых колебаний в начале установился примерно после 5 августа: конверсия В примерно варьируется на уровне 30%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### График относительного изменения кумулятивной конверсии группы B к группе A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "mergedCumulativeConversions = cumulativeDataA[['date','conversion']].merge(cumulativeDataB[['date','conversion']], left_on='date', right_on='date', how='left', suffixes=['A', 'B'])\n",
    "# отобрали нужные переменные по двуз групповым базам и объединили их"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x7fe277dfb340>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(mergedCumulativeConversions['date'], mergedCumulativeConversions['conversionB']/mergedCumulativeConversions['conversionA']-1, label=\"Относительный прирост конверсии группы B относительно группы A\")\n",
    "plt.xlabel('Дата заказа')  # название оси X\n",
    "plt.title('Динамика относительного изменения кумулятивной конверсии группы B к группе A')  # название графика\n",
    "plt.xticks(rotation=45)\n",
    "plt.axhline(y=0, color='black', linestyle='--')\n",
    "plt.axhline(y=0.2, color='grey', linestyle='--')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    График относительного изменения кумулятивной конверсии группы B к группе A показывает, что конвертация покупателей группы В выше, чем А, различия в конверсиях достигают 20% относительно пользователей В"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Точечный график количества заказов по пользователям"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Подсчитаем количество заказов по пользователям:\n",
    "ordersByUsers = (\n",
    "    orders.groupby('visitorid', as_index=False)\n",
    "    .agg({'transactionid': 'nunique'})\n",
    ")\n",
    "ordersByUsers.columns = ['userId', 'orders']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7fe2782ecd60>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_values = pd.Series(range(0,len(ordersByUsers)))\n",
    "plt.scatter(x_values, ordersByUsers['orders'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Пользователи совершали в основном 1-2 покупки"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 95-й и 99-й перцентили количества заказов на пользователя"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 2.]\n"
     ]
    }
   ],
   "source": [
    "print(np.percentile(ordersByUsers['orders'], [95, 99]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    95% всех покупателей совершали не более одной покупки, 99% всех покупателей совершали не более двух покупок"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Точечный график стоимостей заказов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7fe277f41d60>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_values2 = pd.Series(range(0,len(orders['revenue'])))\n",
    "plt.scatter(x_values2, orders['revenue'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Точечный график стоимостей заказов - не столь демонстративен с точки зрения однородности стоимостей заказов, но видно для что некоторых пользователей наблюдаются выбросы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 95-й и 99-й перцентили стоимости заказов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[26785. 53904.]\n"
     ]
    }
   ],
   "source": [
    "print(np.percentile(orders['revenue'], [95, 99]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Менее 5% заказов превышали сумму 27 тысяч, менее 1% - выше 54 тысяч"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Таким образом, на основании верхних границ перцентилей можно говорить о том, что более двух заказов на покупателя и суммы заказа выше 53904 тысяч можно считать выбросами."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cтатистическая значимость различий в конверсии между группами по «сырым» данным"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Для расчета значимости различий  - необходимо иметь в наличии две подвыборки, средние которых и будут сравниваться. Сформируем вначале две подвыборки заказов по группам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "ordersByUsersA = (\n",
    "    orders[orders['group'] == 'A']\n",
    "    .groupby('visitorid', as_index=False)\n",
    "    .agg({'transactionid': pd.Series.nunique})\n",
    ")\n",
    "ordersByUsersA.columns = ['userId', 'orders']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "ordersByUsersB = (\n",
    "    orders[orders['group'] == 'B']\n",
    "    .groupby('visitorid', as_index=False)\n",
    "    .agg({'transactionid': pd.Series.nunique})\n",
    ")\n",
    "ordersByUsersB.columns = ['userId', 'orders']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "visitorsADaily = visitors[visitors['group'] == 'A'][['date', 'visitors']]\n",
    "visitorsADaily.columns = ['date', 'visitorsPerDateA']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Список с количеством заказов для каждого из пользователей + Нули для пользователей, которые ничего не заказывали. Их количество равно разнице между суммой посетителей и количеством записей о заказах\n",
    "sampleA = pd.concat([ordersByUsersA['orders'],pd.Series(0, index=np.arange(visitorsADaily['visitorsPerDateA'].sum() - len(ordersByUsersA['orders'])), name='orders')],axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "visitorsBDaily = visitors[visitors['group'] == 'B'][['date', 'visitors']]\n",
    "visitorsBDaily.columns = ['date', 'visitorsPerDateB']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampleB = pd.concat([ordersByUsersB['orders'],pd.Series(0, index=np.arange(visitorsBDaily['visitorsPerDateB'].sum() - len(ordersByUsersB['orders'])), name='orders')],axis=0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    H0: конверсия группы А равна конверсии группы В\n",
    "    \n",
    "H1: конверсия группы А не равна конверсии группы В"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.011\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats as stats\n",
    "print(\"{0:.3f}\".format(stats.mannwhitneyu(sampleA, sampleB)[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    P-value составляет 1,1% или менее 5% - значит, на уровне значимости 5% мы можем отвергнуть нулевую гипотезу."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.160\n"
     ]
    }
   ],
   "source": [
    "print(\"{0:.3f}\".format(sampleB.mean() / sampleA.mean() - 1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    \n",
    "Средняя конверсия группы В отличается от средней конверсии группы А на 16%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Статистическая значимость различий в среднем чеке заказа между группами по «сырым» данным"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    H0: средний чек группы А равен среднему чеку группы В\n",
    "    \n",
    "H1: средний чек группы А не равен среднему чеку группы В"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.829\n"
     ]
    }
   ],
   "source": [
    "#Чтобы рассчитать статистическую значимость различий в среднем чеке, передадим критерию mannwhitneyu() данные о выручке с заказов.\n",
    "print('{0:.3f}'.format(stats.mannwhitneyu(orders[orders['group']=='A']['revenue'], orders[orders['group']=='B']['revenue'])[1]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    " p-value = 0.829 и это больше 0.05. Значит, нулевую гипотезу не отвергаем, - нет оснований говорить о статистически знаимых различиях"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.287\n"
     ]
    }
   ],
   "source": [
    "print('{0:.3f}'.format(orders[orders['group']=='B']['revenue'].mean()/orders[orders['group']=='A']['revenue'].mean()-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Несмотря на то, что нет оснований говорить о статистически значимых различиях, относительные различия средних чеков составляют около 29%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cтатистическая значимость различий в конверсии между группами по «очищенным» данным"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "orders['userId'] = orders['visitorid']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Осуществим аналогичные шаги, что и делали выше, но предварительно создадим датафрейм с выбросами, интересующие нас пользователи не должны попасть в этот датафрейм"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "                      \n",
    "usersWithManyOrders = pd.concat(\n",
    "    [\n",
    "        ordersByUsersA[ordersByUsersA['orders'] > np.percentile(ordersByUsers['orders'],99)]['userId'],\n",
    "        ordersByUsersB[ordersByUsersB['orders'] > np.percentile(ordersByUsers['orders'],99)]['userId'],\n",
    "    ],\n",
    "    axis=0,\n",
    ")\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "                     \n",
    "usersWithExpensiveOrders = orders[orders['revenue'] > np.percentile(orders['revenue'],99)]['userId']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "abnormalUsers = (\n",
    "    pd.concat([usersWithManyOrders, usersWithExpensiveOrders], axis=0)\n",
    "    .drop_duplicates()\n",
    "    .sort_values()\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "310     2988190573\n",
       "416     3967698036\n",
       "743     4133034833\n",
       "1103    1164614297\n",
       "425     1920142716\n",
       "Name: userId, dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abnormalUsers.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampleAFiltered = pd.concat(\n",
    "\t[\n",
    "    \tordersByUsersA[\n",
    "        \tnp.logical_not(ordersByUsersA['userId'].isin(abnormalUsers))\n",
    "    \t]['orders'],\n",
    "    \tpd.Series(\n",
    "        \t0,\n",
    "        \tindex=np.arange(\n",
    "            \tvisitorsADaily['visitorsPerDateA'].sum() - len(ordersByUsersA['orders'])\n",
    "        \t),\n",
    "        \tname='orders',\n",
    "    \t),\n",
    "\t],\n",
    "\taxis=0,\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    18726.000000\n",
       "mean         0.023924\n",
       "std          0.157294\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          0.000000\n",
       "max          2.000000\n",
       "Name: orders, dtype: float64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampleAFiltered.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampleBFiltered = pd.concat(\n",
    "\t[\n",
    "    \tordersByUsersB[\n",
    "        \tnp.logical_not(ordersByUsersB['userId'].isin(abnormalUsers))\n",
    "    \t]['orders'],\n",
    "    \tpd.Series(\n",
    "        \t0,\n",
    "        \tindex=np.arange(\n",
    "            \tvisitorsBDaily['visitorsPerDateB'].sum() - len(ordersByUsersB['orders'])\n",
    "        \t),\n",
    "        \tname='orders',\n",
    "    \t),\n",
    "\t],\n",
    "\taxis=0,\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3940     0\n",
       "7508     0\n",
       "6878     0\n",
       "13967    0\n",
       "11669    0\n",
       "Name: orders, dtype: int64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampleBFiltered.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "На имеющихся двух базах - проверим статистическую значимость равенства конверсий"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.007\n"
     ]
    }
   ],
   "source": [
    "print('{0:.3f}'.format(stats.mannwhitneyu(sampleAFiltered, sampleBFiltered)[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Результат оценки статистической значимости на сырых данных совпадает с результатом оценки на очищенных данных: нулвевую гипотезу отвергнуть не можем, нет оснований говорить о том, что различй между конверсиями в двух группах нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.189\n"
     ]
    }
   ],
   "source": [
    "print('{0:.3f}'.format(sampleBFiltered.mean()/sampleAFiltered.mean()-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    По сравнению  с сырыми данными отличия конверсии группы В  от средней конверсии группы А стало выше (ранее - 16%) и составляет 19%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Статистическая значимость различий в среднем чеке заказа между группами по «очищенным» данным"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.788\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "\t'{0:.3f}'.format(\n",
    "    \tstats.mannwhitneyu(\n",
    "        \torders[\n",
    "            \tnp.logical_and(\n",
    "                \torders['group'] == 'A',\n",
    "                \tnp.logical_not(orders['userId'].isin(abnormalUsers)),\n",
    "            \t)\n",
    "        \t]['revenue'],\n",
    "        \torders[\n",
    "            \tnp.logical_and(\n",
    "                \torders['group'] == 'B',\n",
    "                \tnp.logical_not(orders['userId'].isin(abnormalUsers)),\n",
    "            \t)\n",
    "        \t]['revenue'],\n",
    "    \t)[1]\n",
    "\t)\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Результат проверки статистической значимости по очищенным от аномалий данным - не отличается от схожего результата по сырым данным: нет оснований отврегнуть нулевую гипотезу, поэтому можно говорить об отсутствии значимых статистических различий в средних чеках двух групп"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.032\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "\t\"{0:.3f}\".format(\n",
    "    \torders[\n",
    "        \tnp.logical_and(\n",
    "            \torders['group'] == 'B',\n",
    "            \tnp.logical_not(orders['userId'].isin(abnormalUsers)),\n",
    "        \t)\n",
    "    \t]['revenue'].mean()\n",
    "    \t/ orders[\n",
    "        \tnp.logical_and(\n",
    "            \torders['group'] == 'A',\n",
    "            \tnp.logical_not(orders['userId'].isin(abnormalUsers)),\n",
    "        \t)\n",
    "    \t]['revenue'].mean()\n",
    "    \t- 1\n",
    "\t)\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    Однако очищенные данные предоставляют более правдоподобные данные относительных отличий средних чеков: расчет на  очищенных данных демонстрируют разницу чеков - в -3%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "    В проекте исследуются данные крупного интернет-магазина, в распоряжении аналитика имеется подготовленный отделом маркетинга список гипотез для увеличения выручки и данные об осуществленных заказах и посетителях магазина.\n",
    "    Для последующих действий со стороны магазина и увеличения выручки от аналитика требуется выбрать приоритетную гипотезу и обосновать необходимость продолжения A/B-теста. Для этого проводится сравнение ключевых показателей выручки, среднего чека и конверсии в отношении групп А и В - на базе графического анализа и проверки статистически значимых различий в группах.\n",
    "    \n",
    "    \n",
    "На основании сопоставления ICE и RICE наиболее приоритетной можно считать гипотезу \"Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок\".\n",
    "    \n",
    "Графический анализ показал, что второй половине августа 2019 года заказы группы В вырываются вперед и показываются гораздо большую прибыль, чем А, аналогичное отставание А наблюдается и при сравнении средних чеков. Помимо этого, посетители из группы В чаще конвертировались: конверсия В примерно варьируется на уровне 30%, отставание группы А от В по конверсии достигает 20%. \n",
    "    \n",
    "Средняя конверсия группы В статистически значимо отличается от средней конверсии группы А.\n",
    "что верно и для очищенных от аномалий (на 19%), и для сырых данных. \n",
    "Относительные различия средних чеков В и А составляют около 29%, однако проверка статистически значимых различий с помощью критерия Манна-Уитни не выявила значимых различий между группами. \n",
    "    \n",
    "\n",
    "На основании озвученных расчетов можно было бы порекомендовать завершить A/B-тест и признать наиболее выигрышной группу В, поскольку в этой группе и выручка больше, и конверсия выше и средний чек, рассчитанный на сырых данных ( то есть с учетом слишком больших чеков), превышает средний чек группы А. При этом статистика p-value, построенная на очищенных от аномалии данных, демонстрируют, что нет оснований говорить о различии средних чеков в группе А и В.\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 3,
    "start_time": "2022-05-25T21:23:29.414Z"
   },
   {
    "duration": 2,
    "start_time": "2022-05-25T21:23:36.803Z"
   },
   {
    "duration": 1085,
    "start_time": "2022-05-25T21:25:46.813Z"
   },
   {
    "duration": 177,
    "start_time": "2022-05-25T21:28:52.373Z"
   },
   {
    "duration": 33,
    "start_time": "2022-05-25T21:31:53.062Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-25T21:32:42.281Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-25T21:33:13.721Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-25T21:35:03.259Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-25T21:35:17.726Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-25T21:35:19.854Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-25T21:35:37.548Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-25T21:38:35.553Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-25T21:47:23.172Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-25T21:48:05.707Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-25T21:48:32.872Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-25T21:48:57.172Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-25T21:49:45.737Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-25T21:51:03.865Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-25T21:51:32.427Z"
   },
   {
    "duration": 295,
    "start_time": "2022-05-25T21:53:03.969Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-25T21:53:49.022Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-25T21:53:53.222Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-25T21:54:33.107Z"
   },
   {
    "duration": 106,
    "start_time": "2022-05-25T21:54:35.675Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-25T21:55:06.898Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-25T21:56:10.789Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-25T21:56:29.078Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-25T21:57:27.058Z"
   },
   {
    "duration": 79,
    "start_time": "2022-05-25T21:57:27.066Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-25T21:57:27.148Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-25T21:57:27.160Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-25T21:57:27.185Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-25T21:57:27.216Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-25T21:57:27.241Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-25T21:57:27.258Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-25T21:57:31.172Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-25T21:57:43.639Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-25T21:57:52.441Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-25T21:57:55.312Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-25T21:58:01.076Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-25T21:58:06.791Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-25T21:58:30.550Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-25T21:58:54.471Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-25T21:59:07.610Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-25T21:59:48.187Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-25T21:59:55.120Z"
   },
   {
    "duration": 163,
    "start_time": "2022-05-25T22:29:43.960Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-25T22:31:29.500Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-25T22:33:32.162Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-25T22:33:56.121Z"
   },
   {
    "duration": 34,
    "start_time": "2022-05-25T22:50:06.641Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-25T22:50:50.282Z"
   },
   {
    "duration": 2560,
    "start_time": "2022-05-25T22:51:13.443Z"
   },
   {
    "duration": 2691,
    "start_time": "2022-05-25T22:52:22.582Z"
   },
   {
    "duration": 2677,
    "start_time": "2022-05-25T22:52:58.001Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-25T22:53:48.638Z"
   },
   {
    "duration": 525,
    "start_time": "2022-05-25T22:53:50.401Z"
   },
   {
    "duration": 820,
    "start_time": "2022-05-26T11:18:26.901Z"
   },
   {
    "duration": 189,
    "start_time": "2022-05-26T11:18:29.105Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-26T11:20:25.293Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T11:20:26.875Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T11:20:27.688Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T11:21:29.275Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T11:21:36.346Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T11:22:09.355Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T11:26:07.288Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T11:26:09.973Z"
   },
   {
    "duration": 257,
    "start_time": "2022-05-26T11:37:26.806Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-26T11:37:37.195Z"
   },
   {
    "duration": 73,
    "start_time": "2022-05-26T11:37:37.202Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T11:37:37.277Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T11:37:37.286Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-26T11:37:37.293Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T11:37:37.307Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T11:37:37.314Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T11:37:37.323Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T11:37:37.332Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T11:37:37.343Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T11:37:37.356Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-26T11:37:37.361Z"
   },
   {
    "duration": 33,
    "start_time": "2022-05-26T11:37:37.375Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T11:37:37.410Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T11:37:37.421Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T11:37:37.427Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T11:37:37.434Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-26T11:37:37.446Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-26T11:37:37.469Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-26T11:37:37.483Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T11:37:37.497Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T11:37:37.506Z"
   },
   {
    "duration": 217,
    "start_time": "2022-05-26T11:44:53.492Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T11:45:04.763Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T11:53:51.817Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T11:53:56.961Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T13:09:18.289Z"
   },
   {
    "duration": 2351,
    "start_time": "2022-05-26T13:09:24.221Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T13:09:26.585Z"
   },
   {
    "duration": 552,
    "start_time": "2022-05-26T13:11:19.811Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T13:12:48.763Z"
   },
   {
    "duration": 158,
    "start_time": "2022-05-26T13:12:55.565Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T13:17:47.062Z"
   },
   {
    "duration": 176,
    "start_time": "2022-05-26T13:22:05.257Z"
   },
   {
    "duration": 147,
    "start_time": "2022-05-26T13:22:10.830Z"
   },
   {
    "duration": 235,
    "start_time": "2022-05-26T13:22:52.464Z"
   },
   {
    "duration": 154,
    "start_time": "2022-05-26T13:25:01.862Z"
   },
   {
    "duration": 133,
    "start_time": "2022-05-26T13:25:56.039Z"
   },
   {
    "duration": 153,
    "start_time": "2022-05-26T13:26:29.406Z"
   },
   {
    "duration": 164,
    "start_time": "2022-05-26T13:27:32.984Z"
   },
   {
    "duration": 165,
    "start_time": "2022-05-26T13:28:09.921Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-26T13:28:19.699Z"
   },
   {
    "duration": 141,
    "start_time": "2022-05-26T13:28:26.106Z"
   },
   {
    "duration": 146,
    "start_time": "2022-05-26T13:30:42.460Z"
   },
   {
    "duration": 149,
    "start_time": "2022-05-26T13:30:46.325Z"
   },
   {
    "duration": 57,
    "start_time": "2022-05-26T13:30:56.685Z"
   },
   {
    "duration": 28,
    "start_time": "2022-05-26T13:31:40.504Z"
   },
   {
    "duration": 49,
    "start_time": "2022-05-26T13:31:43.590Z"
   },
   {
    "duration": 155,
    "start_time": "2022-05-26T13:31:55.750Z"
   },
   {
    "duration": 138,
    "start_time": "2022-05-26T13:32:17.146Z"
   },
   {
    "duration": 162,
    "start_time": "2022-05-26T13:32:23.615Z"
   },
   {
    "duration": 225,
    "start_time": "2022-05-26T14:01:02.909Z"
   },
   {
    "duration": 157,
    "start_time": "2022-05-26T14:13:37.941Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-26T14:20:14.160Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T14:20:39.931Z"
   },
   {
    "duration": 3289,
    "start_time": "2022-05-26T14:21:13.454Z"
   },
   {
    "duration": 1944,
    "start_time": "2022-05-26T14:21:23.561Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T14:23:15.977Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T15:03:51.180Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T15:03:57.250Z"
   },
   {
    "duration": 186,
    "start_time": "2022-05-26T15:04:06.002Z"
   },
   {
    "duration": 171,
    "start_time": "2022-05-26T15:04:38.480Z"
   },
   {
    "duration": 244,
    "start_time": "2022-05-26T15:04:58.734Z"
   },
   {
    "duration": 193,
    "start_time": "2022-05-26T15:05:37.893Z"
   },
   {
    "duration": 195,
    "start_time": "2022-05-26T15:40:10.438Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T15:40:41.448Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T15:40:51.564Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T15:41:50.384Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T15:45:42.071Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T15:46:18.299Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T15:47:04.197Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T15:47:22.588Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T15:58:00.080Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T15:58:40.692Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T16:01:58.162Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T16:02:08.810Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T16:03:06.571Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T16:03:36.197Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T16:03:40.857Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T16:06:29.660Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T16:07:34.370Z"
   },
   {
    "duration": 2241,
    "start_time": "2022-05-26T16:07:37.753Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T16:07:40.329Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-26T16:10:32.437Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T16:10:50.797Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T16:11:24.066Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T16:11:32.687Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T16:12:58.680Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-26T16:13:46.538Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T16:13:47.442Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T16:13:48.248Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T16:13:49.706Z"
   },
   {
    "duration": 286,
    "start_time": "2022-05-26T16:30:32.407Z"
   },
   {
    "duration": 2981,
    "start_time": "2022-05-26T16:30:34.564Z"
   },
   {
    "duration": 60,
    "start_time": "2022-05-26T21:12:46.285Z"
   },
   {
    "duration": 978,
    "start_time": "2022-05-26T21:13:22.251Z"
   },
   {
    "duration": 176,
    "start_time": "2022-05-26T21:13:23.231Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T21:13:23.409Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T21:13:23.421Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T21:13:23.431Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-26T21:13:23.444Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T21:13:23.463Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T21:13:23.479Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T21:13:23.497Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-26T21:13:23.515Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T21:13:23.542Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T21:13:23.550Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-26T21:13:23.568Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:13:23.586Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:13:23.593Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:13:23.600Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T21:13:23.607Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T21:13:23.617Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T21:13:23.625Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-26T21:13:23.636Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-26T21:13:23.660Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T21:13:23.680Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-26T21:13:23.698Z"
   },
   {
    "duration": 36,
    "start_time": "2022-05-26T21:13:23.721Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-26T21:13:23.759Z"
   },
   {
    "duration": 2321,
    "start_time": "2022-05-26T21:13:23.785Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:13:26.107Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-26T21:13:26.113Z"
   },
   {
    "duration": 298,
    "start_time": "2022-05-26T21:13:26.136Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T21:13:26.435Z"
   },
   {
    "duration": 3218,
    "start_time": "2022-05-26T21:13:26.447Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T21:13:29.667Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-26T21:13:29.679Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-26T21:13:29.705Z"
   },
   {
    "duration": 1878,
    "start_time": "2022-05-26T21:13:29.728Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T21:13:31.608Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T21:13:31.620Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T21:13:31.636Z"
   },
   {
    "duration": 2,
    "start_time": "2022-05-26T21:13:31.653Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T21:13:31.657Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T21:13:31.696Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T21:13:31.708Z"
   },
   {
    "duration": 239,
    "start_time": "2022-05-26T21:13:31.719Z"
   },
   {
    "duration": 316,
    "start_time": "2022-05-26T21:13:31.960Z"
   },
   {
    "duration": 324,
    "start_time": "2022-05-26T21:13:57.061Z"
   },
   {
    "duration": 2988,
    "start_time": "2022-05-26T21:13:59.063Z"
   },
   {
    "duration": 2900,
    "start_time": "2022-05-26T21:14:30.269Z"
   },
   {
    "duration": 2872,
    "start_time": "2022-05-26T21:14:48.560Z"
   },
   {
    "duration": 3069,
    "start_time": "2022-05-26T21:15:08.390Z"
   },
   {
    "duration": 38,
    "start_time": "2022-05-26T21:32:49.921Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-26T21:32:58.977Z"
   },
   {
    "duration": 74,
    "start_time": "2022-05-26T21:32:58.983Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T21:32:59.059Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:32:59.068Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-26T21:32:59.075Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T21:32:59.100Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T21:32:59.110Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T21:32:59.117Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-26T21:32:59.125Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-26T21:32:59.141Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:32:59.156Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-26T21:32:59.162Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T21:32:59.184Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:32:59.202Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T21:32:59.208Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T21:32:59.215Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T21:32:59.228Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T21:32:59.238Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:32:59.246Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T21:32:59.252Z"
   },
   {
    "duration": 27,
    "start_time": "2022-05-26T21:32:59.268Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-26T21:32:59.297Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T21:32:59.318Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T21:32:59.330Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T21:32:59.341Z"
   },
   {
    "duration": 2362,
    "start_time": "2022-05-26T21:32:59.350Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T21:33:01.714Z"
   },
   {
    "duration": 33,
    "start_time": "2022-05-26T21:33:01.721Z"
   },
   {
    "duration": 210,
    "start_time": "2022-05-26T21:33:01.756Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T21:33:01.967Z"
   },
   {
    "duration": 3095,
    "start_time": "2022-05-26T21:33:01.980Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T21:33:05.077Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-26T21:33:05.088Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-26T21:33:05.104Z"
   },
   {
    "duration": 1989,
    "start_time": "2022-05-26T21:33:05.120Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T21:33:07.111Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-26T21:33:07.122Z"
   },
   {
    "duration": 28,
    "start_time": "2022-05-26T21:33:07.139Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-26T21:33:07.169Z"
   },
   {
    "duration": 39,
    "start_time": "2022-05-26T21:33:07.197Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-26T21:33:07.241Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-26T21:33:07.267Z"
   },
   {
    "duration": 274,
    "start_time": "2022-05-26T21:33:07.284Z"
   },
   {
    "duration": 306,
    "start_time": "2022-05-26T21:33:07.559Z"
   },
   {
    "duration": 2972,
    "start_time": "2022-05-26T21:33:07.867Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T21:33:10.840Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-26T21:33:17.746Z"
   },
   {
    "duration": 183,
    "start_time": "2022-05-26T21:33:21.967Z"
   },
   {
    "duration": 157,
    "start_time": "2022-05-26T21:34:50.310Z"
   },
   {
    "duration": 290,
    "start_time": "2022-05-26T21:35:37.655Z"
   },
   {
    "duration": 309,
    "start_time": "2022-05-26T21:37:40.576Z"
   },
   {
    "duration": 12159,
    "start_time": "2022-05-26T21:38:13.496Z"
   },
   {
    "duration": 12257,
    "start_time": "2022-05-26T21:38:31.991Z"
   },
   {
    "duration": 12139,
    "start_time": "2022-05-26T21:38:46.494Z"
   },
   {
    "duration": 12254,
    "start_time": "2022-05-26T21:40:22.467Z"
   },
   {
    "duration": 1016,
    "start_time": "2022-05-26T21:40:45.241Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-26T21:42:04.991Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-26T21:42:09.381Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T21:44:49.609Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-26T21:46:03.167Z"
   },
   {
    "duration": 129,
    "start_time": "2022-05-26T21:46:05.250Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T22:03:18.469Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T22:16:54.310Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T22:17:06.851Z"
   },
   {
    "duration": 130,
    "start_time": "2022-05-26T22:17:31.490Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T22:19:33.673Z"
   },
   {
    "duration": 150,
    "start_time": "2022-05-26T22:20:57.089Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T22:21:50.568Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-26T22:22:30.268Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T22:22:50.312Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T22:23:00.446Z"
   },
   {
    "duration": 109,
    "start_time": "2022-05-26T22:26:20.646Z"
   },
   {
    "duration": 98,
    "start_time": "2022-05-26T22:27:03.286Z"
   },
   {
    "duration": 127,
    "start_time": "2022-05-26T22:27:09.158Z"
   },
   {
    "duration": 106,
    "start_time": "2022-05-26T22:27:13.546Z"
   },
   {
    "duration": 136,
    "start_time": "2022-05-26T22:27:21.175Z"
   },
   {
    "duration": 64,
    "start_time": "2022-05-26T23:09:28.386Z"
   },
   {
    "duration": 69,
    "start_time": "2022-05-26T23:09:29.735Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-26T23:13:47.307Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T23:17:07.665Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-26T23:17:09.965Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T23:17:28.818Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T23:17:43.306Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T23:17:57.396Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T23:18:01.718Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-26T23:18:02.653Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T23:18:09.225Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-26T23:18:12.705Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T23:18:22.491Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-26T23:18:28.651Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-26T23:25:41.828Z"
   },
   {
    "duration": 1191,
    "start_time": "2022-05-27T09:44:26.410Z"
   },
   {
    "duration": 195,
    "start_time": "2022-05-27T09:44:27.603Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T09:44:27.800Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T09:44:27.812Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T09:44:27.826Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T09:44:27.840Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T09:44:27.849Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-27T09:44:27.857Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-27T09:44:27.878Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T09:44:27.903Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T09:44:27.918Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T09:44:27.927Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-27T09:44:27.945Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T09:44:27.965Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T09:44:27.982Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T09:44:27.989Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-27T09:44:27.999Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T09:44:28.025Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T09:44:28.036Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T09:44:28.045Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T09:44:28.061Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T09:44:28.072Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T09:44:28.084Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T09:44:28.100Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T09:44:28.109Z"
   },
   {
    "duration": 35,
    "start_time": "2022-05-27T10:07:07.306Z"
   },
   {
    "duration": 44,
    "start_time": "2022-05-27T10:10:55.810Z"
   },
   {
    "duration": 76,
    "start_time": "2022-05-27T10:32:13.500Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T10:32:23.165Z"
   },
   {
    "duration": 81,
    "start_time": "2022-05-27T10:32:23.172Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T10:32:23.255Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T10:32:23.264Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T10:32:23.271Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T10:32:23.284Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T10:32:23.294Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T10:32:23.308Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T10:32:23.317Z"
   },
   {
    "duration": 31,
    "start_time": "2022-05-27T10:32:23.331Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T10:32:23.365Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-27T10:32:23.371Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T10:32:23.398Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T10:32:23.412Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T10:32:23.421Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T10:32:23.430Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T10:32:23.441Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T10:32:23.459Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T10:32:23.467Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T10:32:23.475Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T10:32:23.489Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-27T10:32:23.502Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T10:32:23.523Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T10:32:23.542Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T10:32:23.556Z"
   },
   {
    "duration": 2293,
    "start_time": "2022-05-27T10:32:23.574Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T10:32:25.869Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T10:32:25.877Z"
   },
   {
    "duration": 482,
    "start_time": "2022-05-27T10:32:25.897Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T10:32:26.380Z"
   },
   {
    "duration": 4136,
    "start_time": "2022-05-27T10:32:26.391Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T10:32:30.529Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-27T10:32:30.542Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-27T10:32:30.573Z"
   },
   {
    "duration": 2030,
    "start_time": "2022-05-27T10:32:30.595Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T10:32:32.627Z"
   },
   {
    "duration": 39,
    "start_time": "2022-05-27T10:32:32.639Z"
   },
   {
    "duration": 39,
    "start_time": "2022-05-27T10:32:32.680Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-27T10:32:32.721Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-27T10:32:32.744Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-27T10:32:32.775Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T10:32:32.806Z"
   },
   {
    "duration": 233,
    "start_time": "2022-05-27T10:32:32.817Z"
   },
   {
    "duration": 297,
    "start_time": "2022-05-27T10:32:36.723Z"
   },
   {
    "duration": 3231,
    "start_time": "2022-05-27T10:32:39.375Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T10:40:18.187Z"
   },
   {
    "duration": 329,
    "start_time": "2022-05-27T10:42:42.028Z"
   },
   {
    "duration": 95,
    "start_time": "2022-05-27T11:10:17.439Z"
   },
   {
    "duration": 2,
    "start_time": "2022-05-27T12:13:59.572Z"
   },
   {
    "duration": 71,
    "start_time": "2022-05-27T12:13:59.578Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T12:13:59.650Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T12:13:59.661Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T12:13:59.680Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T12:13:59.695Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T12:13:59.707Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T12:13:59.716Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T12:13:59.725Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-27T12:13:59.738Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-27T12:13:59.766Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T12:13:59.790Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T12:13:59.807Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T12:13:59.819Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T12:13:59.829Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T12:13:59.836Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T12:13:59.844Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T12:13:59.860Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T12:13:59.877Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T12:13:59.885Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T12:13:59.899Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T12:13:59.909Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T12:13:59.928Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T12:13:59.940Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T12:13:59.954Z"
   },
   {
    "duration": 2399,
    "start_time": "2022-05-27T12:13:59.968Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T12:14:02.369Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T12:14:02.377Z"
   },
   {
    "duration": 203,
    "start_time": "2022-05-27T12:14:02.394Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T12:14:02.598Z"
   },
   {
    "duration": 3283,
    "start_time": "2022-05-27T12:14:02.609Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T12:14:05.893Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-27T12:14:05.906Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T12:14:05.927Z"
   },
   {
    "duration": 2114,
    "start_time": "2022-05-27T12:14:05.946Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T12:14:08.062Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T12:14:08.079Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T12:14:08.091Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T12:14:08.108Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-27T12:14:08.112Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-27T12:14:08.131Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T12:14:08.162Z"
   },
   {
    "duration": 231,
    "start_time": "2022-05-27T12:14:08.180Z"
   },
   {
    "duration": 324,
    "start_time": "2022-05-27T12:14:08.413Z"
   },
   {
    "duration": 3138,
    "start_time": "2022-05-27T12:14:08.739Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T12:14:11.879Z"
   },
   {
    "duration": 235,
    "start_time": "2022-05-27T12:14:11.889Z"
   },
   {
    "duration": 319,
    "start_time": "2022-05-27T12:14:12.126Z"
   },
   {
    "duration": 1037,
    "start_time": "2022-05-27T12:14:12.447Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T12:14:13.486Z"
   },
   {
    "duration": 126,
    "start_time": "2022-05-27T12:14:13.496Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T12:14:13.624Z"
   },
   {
    "duration": 155,
    "start_time": "2022-05-27T12:14:13.629Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T12:14:13.785Z"
   },
   {
    "duration": 82,
    "start_time": "2022-05-27T12:14:13.791Z"
   },
   {
    "duration": 76,
    "start_time": "2022-05-27T12:14:13.875Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T12:14:13.959Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T12:15:02.794Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T12:15:29.389Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T12:17:25.157Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T12:31:39.271Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T12:32:16.423Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T12:32:40.372Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T12:32:48.482Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T12:47:39.631Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T12:48:23.718Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-27T12:50:49.914Z"
   },
   {
    "duration": 755,
    "start_time": "2022-05-27T12:51:31.875Z"
   },
   {
    "duration": 28,
    "start_time": "2022-05-27T12:52:53.781Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T12:52:57.542Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T13:05:08.276Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T13:05:10.100Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T13:10:34.998Z"
   },
   {
    "duration": 586,
    "start_time": "2022-05-27T13:15:12.748Z"
   },
   {
    "duration": 52,
    "start_time": "2022-05-27T13:15:13.378Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T13:15:39.641Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T13:15:57.297Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T13:16:44.288Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T13:16:53.153Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T13:16:55.654Z"
   },
   {
    "duration": 32,
    "start_time": "2022-05-27T13:16:58.473Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T13:17:28.842Z"
   },
   {
    "duration": 41,
    "start_time": "2022-05-27T15:49:24.904Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-27T15:50:10.057Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-27T15:50:13.644Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T15:56:36.967Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T16:08:18.246Z"
   },
   {
    "duration": 352,
    "start_time": "2022-05-27T16:09:07.424Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T16:18:13.897Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T16:18:35.358Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-27T16:20:16.020Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T16:21:35.324Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T16:21:51.754Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T16:21:52.959Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T16:21:54.665Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T16:21:56.215Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T16:22:07.378Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T16:22:21.861Z"
   },
   {
    "duration": 31,
    "start_time": "2022-05-27T16:23:46.422Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-27T16:25:56.381Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-27T16:26:03.268Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T16:26:15.913Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T16:44:58.470Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T16:45:02.787Z"
   },
   {
    "duration": 1491,
    "start_time": "2022-05-27T22:11:00.393Z"
   },
   {
    "duration": 219,
    "start_time": "2022-05-27T22:11:01.887Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T22:11:02.109Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T22:11:02.124Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-27T22:11:02.129Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T22:14:40.421Z"
   },
   {
    "duration": 92,
    "start_time": "2022-05-27T22:14:40.426Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:14:40.519Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:14:40.528Z"
   },
   {
    "duration": 35,
    "start_time": "2022-05-27T22:14:40.537Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:14:43.481Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:14:56.536Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:14:59.253Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T22:15:13.941Z"
   },
   {
    "duration": 70,
    "start_time": "2022-05-27T22:15:13.954Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:15:14.025Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:15:14.034Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T22:15:14.053Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:15:14.067Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:15:14.075Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:15:14.084Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T22:15:14.093Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T22:15:14.109Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T22:15:14.124Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-27T22:15:14.129Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T22:15:14.151Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T22:15:19.822Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T22:15:21.463Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:15:22.292Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:15:23.533Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:15:28.410Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:15:30.172Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-27T22:15:31.043Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:15:36.928Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-27T22:15:38.040Z"
   },
   {
    "duration": 132,
    "start_time": "2022-05-27T22:15:52.964Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-27T22:15:56.056Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T22:15:58.209Z"
   },
   {
    "duration": 2524,
    "start_time": "2022-05-27T22:17:33.261Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:17:47.899Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:17:51.613Z"
   },
   {
    "duration": 466,
    "start_time": "2022-05-27T22:17:52.965Z"
   },
   {
    "duration": 3568,
    "start_time": "2022-05-27T22:19:08.331Z"
   },
   {
    "duration": 2011,
    "start_time": "2022-05-27T22:19:49.296Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-27T22:20:33.653Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T22:20:46.795Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T22:20:48.299Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-27T22:21:09.819Z"
   },
   {
    "duration": 217,
    "start_time": "2022-05-27T22:21:12.122Z"
   },
   {
    "duration": 312,
    "start_time": "2022-05-27T22:22:11.572Z"
   },
   {
    "duration": 3107,
    "start_time": "2022-05-27T22:22:14.698Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-27T22:23:26.889Z"
   },
   {
    "duration": 296,
    "start_time": "2022-05-27T22:23:30.661Z"
   },
   {
    "duration": 321,
    "start_time": "2022-05-27T22:24:26.231Z"
   },
   {
    "duration": 1039,
    "start_time": "2022-05-27T22:24:34.130Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:24:57.890Z"
   },
   {
    "duration": 118,
    "start_time": "2022-05-27T22:25:02.182Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:25:10.256Z"
   },
   {
    "duration": 146,
    "start_time": "2022-05-27T22:25:19.983Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T22:25:33.626Z"
   },
   {
    "duration": 67,
    "start_time": "2022-05-27T22:25:51.218Z"
   },
   {
    "duration": 72,
    "start_time": "2022-05-27T22:25:58.866Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:26:05.522Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:26:08.087Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:26:17.310Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:26:17.970Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-27T22:26:32.553Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:27:25.055Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:27:27.719Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-27T22:28:03.352Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T22:28:05.602Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:28:16.542Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:28:27.276Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-27T22:28:33.248Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:28:35.711Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-27T22:29:13.969Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-27T22:29:26.526Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-27T22:29:51.282Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-27T22:30:30.570Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:30:33.987Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-27T22:30:57.809Z"
   },
   {
    "duration": 1188,
    "start_time": "2022-05-28T19:56:22.929Z"
   },
   {
    "duration": 68,
    "start_time": "2022-05-28T19:56:24.119Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-28T19:56:24.189Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-28T19:56:24.207Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-28T19:56:24.221Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-28T19:56:24.240Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-28T19:56:24.250Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-28T19:56:24.260Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-28T19:56:24.273Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-28T19:56:24.298Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:24.322Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-28T19:56:24.330Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-28T19:56:24.348Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-28T19:56:24.363Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-28T19:56:24.373Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-28T19:56:24.397Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-28T19:56:24.404Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:24.424Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-28T19:56:24.433Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-28T19:56:24.440Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:24.453Z"
   },
   {
    "duration": 34,
    "start_time": "2022-05-28T19:56:24.461Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-28T19:56:24.497Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-28T19:56:24.511Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-28T19:56:24.529Z"
   },
   {
    "duration": 3813,
    "start_time": "2022-05-28T19:56:24.541Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-28T19:56:28.356Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:28.366Z"
   },
   {
    "duration": 355,
    "start_time": "2022-05-28T19:56:28.375Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-28T19:56:28.732Z"
   },
   {
    "duration": 3705,
    "start_time": "2022-05-28T19:56:28.746Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-28T19:56:32.453Z"
   },
   {
    "duration": 48,
    "start_time": "2022-05-28T19:56:32.465Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-28T19:56:32.516Z"
   },
   {
    "duration": 2211,
    "start_time": "2022-05-28T19:56:32.532Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-28T19:56:34.745Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-28T19:56:34.756Z"
   },
   {
    "duration": 35,
    "start_time": "2022-05-28T19:56:34.770Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-28T19:56:34.807Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-28T19:56:34.814Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-28T19:56:34.831Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-28T19:56:34.842Z"
   },
   {
    "duration": 251,
    "start_time": "2022-05-28T19:56:34.853Z"
   },
   {
    "duration": 627,
    "start_time": "2022-05-28T19:56:35.106Z"
   },
   {
    "duration": 3688,
    "start_time": "2022-05-28T19:56:35.735Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-28T19:56:39.425Z"
   },
   {
    "duration": 319,
    "start_time": "2022-05-28T19:56:39.435Z"
   },
   {
    "duration": 478,
    "start_time": "2022-05-28T19:56:39.755Z"
   },
   {
    "duration": 1514,
    "start_time": "2022-05-28T19:56:40.234Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-28T19:56:41.750Z"
   },
   {
    "duration": 120,
    "start_time": "2022-05-28T19:56:41.757Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-28T19:56:41.879Z"
   },
   {
    "duration": 148,
    "start_time": "2022-05-28T19:56:41.896Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-28T19:56:42.045Z"
   },
   {
    "duration": 88,
    "start_time": "2022-05-28T19:56:42.052Z"
   },
   {
    "duration": 89,
    "start_time": "2022-05-28T19:56:42.142Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-28T19:56:42.232Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:42.238Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:42.246Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-28T19:56:42.255Z"
   },
   {
    "duration": 56,
    "start_time": "2022-05-28T19:56:42.269Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-28T19:56:42.327Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-28T19:56:42.333Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-28T19:56:42.358Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-28T19:56:42.369Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-28T19:56:42.378Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-28T19:56:42.400Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-28T19:56:42.421Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-28T19:56:42.434Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-28T19:56:42.446Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-28T19:56:42.458Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-28T19:56:42.468Z"
   },
   {
    "duration": 57,
    "start_time": "2022-05-28T19:56:42.477Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-28T19:56:42.537Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-28T19:56:42.543Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-28T19:56:42.562Z"
   },
   {
    "duration": 1253,
    "start_time": "2022-05-29T15:22:11.769Z"
   },
   {
    "duration": 186,
    "start_time": "2022-05-29T15:22:13.027Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T15:22:13.215Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-29T15:22:13.232Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T15:22:13.237Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T15:22:22.666Z"
   },
   {
    "duration": 2,
    "start_time": "2022-05-29T15:22:46.873Z"
   },
   {
    "duration": 2,
    "start_time": "2022-05-29T15:23:07.616Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T15:23:12.516Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T15:23:17.718Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T15:24:14.857Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-29T15:24:37.646Z"
   },
   {
    "duration": 72,
    "start_time": "2022-05-29T15:24:37.659Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T15:24:37.733Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T15:24:37.743Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T15:24:37.754Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T15:24:37.768Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T15:24:37.778Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T15:24:37.786Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T15:24:37.795Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-29T15:24:37.802Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T15:24:37.828Z"
   },
   {
    "duration": 2,
    "start_time": "2022-05-29T15:24:37.840Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-29T15:24:37.844Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T15:24:37.859Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T15:24:37.873Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T15:24:37.881Z"
   },
   {
    "duration": 41,
    "start_time": "2022-05-29T15:24:37.887Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T15:24:37.930Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T15:24:37.940Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T15:24:37.952Z"
   },
   {
    "duration": 27,
    "start_time": "2022-05-29T15:24:37.964Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T15:24:37.993Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T15:33:45.375Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T15:34:06.055Z"
   },
   {
    "duration": 30,
    "start_time": "2022-05-29T15:37:27.223Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-29T15:37:36.551Z"
   },
   {
    "duration": 250,
    "start_time": "2022-05-29T15:37:51.103Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T15:38:02.884Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-29T15:52:12.269Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-29T15:53:02.546Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T15:53:22.886Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T15:59:45.348Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T15:59:59.500Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T16:00:14.020Z"
   },
   {
    "duration": 107,
    "start_time": "2022-05-29T16:13:57.987Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T16:14:01.771Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T16:14:33.349Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T16:14:42.098Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T16:14:55.364Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T16:15:03.407Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T16:16:10.097Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-29T16:17:32.627Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T16:17:54.635Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-29T16:49:00.098Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T16:49:01.982Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T16:49:28.932Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T16:49:43.312Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T16:50:07.182Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T16:50:10.778Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T16:50:10.892Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T16:52:25.095Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-29T16:53:06.831Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-29T16:58:00.889Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-29T17:00:24.261Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T17:01:03.761Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T17:01:50.650Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T17:02:47.199Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T17:03:10.252Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T17:04:13.950Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T17:04:16.169Z"
   },
   {
    "duration": 54,
    "start_time": "2022-05-29T17:05:15.679Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-29T17:05:57.159Z"
   },
   {
    "duration": 34,
    "start_time": "2022-05-29T17:07:10.603Z"
   },
   {
    "duration": 24,
    "start_time": "2022-05-29T17:08:23.773Z"
   },
   {
    "duration": 58,
    "start_time": "2022-05-29T17:09:14.980Z"
   },
   {
    "duration": 29,
    "start_time": "2022-05-29T17:12:45.890Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-29T17:13:37.573Z"
   },
   {
    "duration": 38,
    "start_time": "2022-05-29T17:14:29.751Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-29T17:14:49.281Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-29T17:15:41.055Z"
   },
   {
    "duration": 36,
    "start_time": "2022-05-29T17:15:55.881Z"
   },
   {
    "duration": 44,
    "start_time": "2022-05-29T17:16:17.153Z"
   },
   {
    "duration": 28,
    "start_time": "2022-05-29T17:16:49.051Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-29T17:17:04.454Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T17:17:24.217Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T17:17:34.285Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T17:17:45.506Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T17:18:43.281Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T17:19:37.996Z"
   },
   {
    "duration": 684,
    "start_time": "2022-05-29T17:19:54.472Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T17:20:47.334Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-29T17:31:02.229Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T17:34:36.824Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-29T17:35:01.573Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T17:36:10.862Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-29T17:37:20.966Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-29T17:41:01.584Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-29T17:41:10.001Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T17:41:15.950Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T17:41:42.488Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T17:41:53.720Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T17:42:09.266Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T17:42:17.228Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-29T17:42:54.446Z"
   },
   {
    "duration": 718,
    "start_time": "2022-05-29T17:43:44.268Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-29T17:45:31.090Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T17:52:02.378Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-29T17:52:50.578Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T17:53:16.115Z"
   },
   {
    "duration": 22,
    "start_time": "2022-05-29T17:55:15.176Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T17:58:47.921Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T18:04:24.389Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T18:04:52.608Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T18:05:18.644Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T18:05:30.768Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T18:05:39.328Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-29T18:05:48.321Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T18:07:43.899Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T18:08:05.665Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T18:10:14.378Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T18:10:29.199Z"
   },
   {
    "duration": 26,
    "start_time": "2022-05-29T18:10:37.949Z"
   },
   {
    "duration": 34,
    "start_time": "2022-05-29T18:10:49.142Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T18:11:20.661Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-29T18:15:27.129Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-29T18:16:33.769Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T18:17:19.048Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T18:17:26.208Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T18:17:33.619Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T18:18:54.803Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-29T18:19:12.155Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T18:20:19.151Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T18:21:53.223Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-29T18:22:12.863Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-29T18:23:36.562Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:24:09.824Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:24:31.677Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:25:03.366Z"
   },
   {
    "duration": 28,
    "start_time": "2022-05-29T18:25:28.077Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-29T18:25:33.485Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:25:43.478Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:26:19.225Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T18:26:30.025Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:28:10.039Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T18:29:10.654Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-29T18:30:06.984Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T18:30:12.610Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:30:27.091Z"
   },
   {
    "duration": 715,
    "start_time": "2022-05-29T18:30:49.155Z"
   },
   {
    "duration": 458,
    "start_time": "2022-05-29T18:32:29.069Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T18:32:58.176Z"
   },
   {
    "duration": 474,
    "start_time": "2022-05-29T18:33:41.492Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T18:33:57.002Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T18:34:16.845Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T18:53:40.084Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T18:55:15.541Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T18:55:43.016Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-29T18:56:38.635Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T18:57:17.914Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T18:58:10.136Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T18:58:37.264Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-29T18:59:01.416Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T18:59:07.287Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T18:59:45.055Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T18:59:59.558Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-29T19:00:26.300Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T19:00:41.919Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T19:01:25.456Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T19:01:28.541Z"
   },
   {
    "duration": 274,
    "start_time": "2022-05-29T19:01:29.642Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T19:01:40.389Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T19:01:55.178Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:02:19.058Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T19:03:12.069Z"
   },
   {
    "duration": 31,
    "start_time": "2022-05-29T19:06:04.642Z"
   },
   {
    "duration": 2123,
    "start_time": "2022-05-29T19:07:15.551Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:07:21.670Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T19:07:23.160Z"
   },
   {
    "duration": 566,
    "start_time": "2022-05-29T19:07:24.079Z"
   },
   {
    "duration": 2786,
    "start_time": "2022-05-29T19:07:45.498Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T19:07:49.369Z"
   },
   {
    "duration": 1730,
    "start_time": "2022-05-29T19:07:53.959Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T19:07:57.709Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:08:04.858Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-29T19:08:05.631Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T19:08:08.642Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-29T19:08:13.521Z"
   },
   {
    "duration": 203,
    "start_time": "2022-05-29T19:08:15.192Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-29T19:08:38.678Z"
   },
   {
    "duration": 155,
    "start_time": "2022-05-29T19:08:43.579Z"
   },
   {
    "duration": 1723,
    "start_time": "2022-05-29T19:08:44.262Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T19:09:56.942Z"
   },
   {
    "duration": 223,
    "start_time": "2022-05-29T19:09:57.621Z"
   },
   {
    "duration": 132,
    "start_time": "2022-05-29T19:10:36.465Z"
   },
   {
    "duration": 753,
    "start_time": "2022-05-29T19:10:37.043Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T19:11:30.702Z"
   },
   {
    "duration": 157,
    "start_time": "2022-05-29T19:11:31.366Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:11:39.686Z"
   },
   {
    "duration": 130,
    "start_time": "2022-05-29T19:13:26.111Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T19:13:32.251Z"
   },
   {
    "duration": 71,
    "start_time": "2022-05-29T19:15:10.572Z"
   },
   {
    "duration": 70,
    "start_time": "2022-05-29T19:15:11.174Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T19:15:11.807Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-29T19:15:12.622Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:15:13.391Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T19:15:15.679Z"
   },
   {
    "duration": 25,
    "start_time": "2022-05-29T19:15:21.157Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-29T19:17:47.472Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-29T19:18:02.732Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T19:18:05.322Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:19:16.452Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-29T19:22:11.793Z"
   },
   {
    "duration": 37,
    "start_time": "2022-05-29T19:22:53.622Z"
   },
   {
    "duration": 57,
    "start_time": "2022-05-29T19:24:19.094Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T19:26:17.103Z"
   },
   {
    "duration": 62,
    "start_time": "2022-05-29T19:26:26.408Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T19:26:58.670Z"
   },
   {
    "duration": 57,
    "start_time": "2022-05-29T19:27:50.664Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T19:29:00.303Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:29:53.908Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T19:29:54.600Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T19:29:55.700Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T19:29:57.972Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-29T19:30:01.483Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T19:30:03.181Z"
   },
   {
    "duration": 28,
    "start_time": "2022-05-29T19:30:12.438Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-29T19:30:23.070Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-29T19:32:02.049Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-29T19:32:06.641Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-29T19:35:46.187Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T19:35:56.162Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-29T19:43:31.982Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-29T19:43:34.892Z"
   },
   {
    "duration": 52,
    "start_time": "2022-05-29T19:49:51.501Z"
   },
   {
    "duration": 1223,
    "start_time": "2022-05-30T11:55:21.665Z"
   },
   {
    "duration": 225,
    "start_time": "2022-05-30T11:55:22.890Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:23.116Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-30T11:55:23.130Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-30T11:55:23.147Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-30T11:55:23.166Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-30T11:55:23.186Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-30T11:55:23.204Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-30T11:55:23.224Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-30T11:55:23.232Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-30T11:55:23.244Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-30T11:55:23.256Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-30T11:55:23.266Z"
   },
   {
    "duration": 20,
    "start_time": "2022-05-30T11:55:23.286Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-30T11:55:23.308Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:23.320Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-30T11:55:23.335Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-30T11:55:23.348Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-30T11:55:23.367Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:23.383Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-30T11:55:23.397Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:23.421Z"
   },
   {
    "duration": 15,
    "start_time": "2022-05-30T11:55:23.430Z"
   },
   {
    "duration": 18,
    "start_time": "2022-05-30T11:55:23.446Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:23.466Z"
   },
   {
    "duration": 16,
    "start_time": "2022-05-30T11:55:23.476Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:23.494Z"
   },
   {
    "duration": 23,
    "start_time": "2022-05-30T11:55:23.508Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-30T11:55:23.532Z"
   },
   {
    "duration": 32,
    "start_time": "2022-05-30T11:55:23.545Z"
   },
   {
    "duration": 1961,
    "start_time": "2022-05-30T11:55:23.579Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-30T11:55:25.542Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:25.547Z"
   },
   {
    "duration": 290,
    "start_time": "2022-05-30T11:55:25.562Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:25.854Z"
   },
   {
    "duration": 2812,
    "start_time": "2022-05-30T11:55:25.868Z"
   },
   {
    "duration": 11,
    "start_time": "2022-05-30T11:55:28.682Z"
   },
   {
    "duration": 69,
    "start_time": "2022-05-30T11:55:28.695Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-30T11:55:28.765Z"
   },
   {
    "duration": 2515,
    "start_time": "2022-05-30T11:55:28.776Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-30T11:55:31.297Z"
   },
   {
    "duration": 50,
    "start_time": "2022-05-30T11:55:31.310Z"
   },
   {
    "duration": 21,
    "start_time": "2022-05-30T11:55:31.362Z"
   },
   {
    "duration": 13,
    "start_time": "2022-05-30T11:55:31.385Z"
   },
   {
    "duration": 19,
    "start_time": "2022-05-30T11:55:31.400Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-30T11:55:31.421Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-30T11:55:31.432Z"
   },
   {
    "duration": 207,
    "start_time": "2022-05-30T11:55:31.440Z"
   },
   {
    "duration": 160,
    "start_time": "2022-05-30T11:55:31.649Z"
   },
   {
    "duration": 1729,
    "start_time": "2022-05-30T11:55:31.810Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:33.541Z"
   },
   {
    "duration": 199,
    "start_time": "2022-05-30T11:55:33.550Z"
   },
   {
    "duration": 131,
    "start_time": "2022-05-30T11:55:33.750Z"
   },
   {
    "duration": 625,
    "start_time": "2022-05-30T11:55:33.882Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-30T11:55:34.508Z"
   },
   {
    "duration": 276,
    "start_time": "2022-05-30T11:55:34.519Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-30T11:55:34.796Z"
   },
   {
    "duration": 149,
    "start_time": "2022-05-30T11:55:34.802Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:34.953Z"
   },
   {
    "duration": 64,
    "start_time": "2022-05-30T11:55:34.962Z"
   },
   {
    "duration": 94,
    "start_time": "2022-05-30T11:55:35.028Z"
   },
   {
    "duration": 4,
    "start_time": "2022-05-30T11:55:35.123Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:35.129Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-30T11:55:35.138Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-30T11:55:35.159Z"
   },
   {
    "duration": 44,
    "start_time": "2022-05-30T11:55:35.167Z"
   },
   {
    "duration": 5,
    "start_time": "2022-05-30T11:55:35.213Z"
   },
   {
    "duration": 17,
    "start_time": "2022-05-30T11:55:35.220Z"
   },
   {
    "duration": 7,
    "start_time": "2022-05-30T11:55:35.239Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-30T11:55:35.247Z"
   },
   {
    "duration": 10,
    "start_time": "2022-05-30T11:55:35.262Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-30T11:55:35.274Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-30T11:55:35.284Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-30T11:55:35.292Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:35.307Z"
   },
   {
    "duration": 12,
    "start_time": "2022-05-30T11:55:35.317Z"
   },
   {
    "duration": 9,
    "start_time": "2022-05-30T11:55:35.330Z"
   },
   {
    "duration": 6,
    "start_time": "2022-05-30T11:55:35.340Z"
   },
   {
    "duration": 38,
    "start_time": "2022-05-30T11:55:35.348Z"
   },
   {
    "duration": 3,
    "start_time": "2022-05-30T11:55:35.388Z"
   },
   {
    "duration": 14,
    "start_time": "2022-05-30T11:55:35.392Z"
   },
   {
    "duration": 8,
    "start_time": "2022-05-30T11:55:35.407Z"
   },
   {
    "duration": 1138,
    "start_time": "2022-10-28T08:24:43.653Z"
   },
   {
    "duration": 251,
    "start_time": "2022-10-28T08:24:46.565Z"
   },
   {
    "duration": 12,
    "start_time": "2022-10-28T08:24:50.109Z"
   },
   {
    "duration": 3,
    "start_time": "2022-10-28T08:24:54.528Z"
   },
   {
    "duration": 10,
    "start_time": "2022-10-28T08:24:56.332Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "172.167px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
